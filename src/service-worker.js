import logger from "loglevel";
import { timestamp, files, shell } from "@sapper/service-worker";

logger.setDefaultLevel("error");

const ASSETS = `cache${timestamp}`;

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = shell
  .concat(files)
  .filter(fileName => !fileName.endsWith("mp3"));
const cached = new Set(to_cache);

log("Asset cache: ", ASSETS);

self.addEventListener("install", event => {
  for (let item of to_cache) {
    log(`Caching ${item} in ${ASSETS}`);
  }

  event.waitUntil(
    caches
      .open(ASSETS)
      .then(cache => cache.addAll(to_cache))
      .then(() => {
        self.skipWaiting();
      })
  );
});

self.addEventListener("activate", event => {
  event.waitUntil(
    caches.keys().then(async keys => {
      // delete old caches
      for (const key of keys) {
        if (key !== ASSETS) {
          log(`Deleting cache ${key}`);
          await caches.delete(key);
        }
      }

      self.clients.claim();
    })
  );
});

self.addEventListener("fetch", event => {
  if (event.request.method !== "GET" || event.request.headers.has("range")) {
    log(`Not handling ${event.request}`);
    return;
  }

  const url = new URL(event.request.url);

  // don't try to handle e.g. data: URIs
  if (!url.protocol.startsWith("http")) return;

  // ignore dev server requests
  if (
    url.hostname === self.location.hostname &&
    url.port !== self.location.port
  ) {
    warn(`Not handling ${url} because it's a dev server request`);
    return;
  }

  if (url.host === self.location.host) {
    if (isBundlerGeneratedAsset(url)) {
      log(`Serving ${url.pathname} from cache`);
      event.respondWith(caches.match(event.request));
      return;
    } else {
      warn(`${url.pathname} not found in cache`);
    }
  } else {
    warn(
      `Not handling ${url.pathname} because the url host doesn't match the location host`
    );
  }

  // always serve static files and bundler-generated assets from cache

  if (event.request.cache === "only-if-cached") return;

  // for everything else, try the network first, falling back to
  // cache if the user is offline. (If the pages never change, you
  // might prefer a cache-first approach to a network-first one.)
  event.respondWith(
    caches.open(`offline${timestamp}`).then(async cache => {
      try {
        const response = await fetch(event.request);
        cache.put(event.request, response.clone());
        log(
          `Fetched ${url.pathname} from the network and put it into the offline cache`
        );
        return response;
      } catch (err) {
        const response = await cache.match(event.request);
        log(`Could not fetch ${url} from the network, trying offline cache`);
        if (response) return response;

        throw err;
      }
    })
  );
});

self.addEventListener("message", event => {
  const { data } = event;

  if (data.command === "set-log-level") {
    const { level } = data;
    logger.setLevel(level);
  }
});

function isBundlerGeneratedAsset(url) {
  const pathname = url.pathname;
  const cacheKey = pathname.startsWith("/") ? pathname.slice(1) : pathname;

  return cached.has(cacheKey);
}

function styles(level) {
  const methodToColorMap = {
    debug: `#7f8c8d`, // Gray
    log: `#2ecc71`, // Green
    warn: `#f39c12`, // Yellow
    error: `#c0392b`, // Red
    groupCollapsed: `#3498db`, // Blue
    groupEnd: null, // No colored prefix on groupEnd
  };

  return [
    `background-color: ${methodToColorMap[level]}`,
    "border-radius: 0.5em",
    "color: white",
    "font-weight: bold",
    "padding: 2px 0.5em",
  ].join(";");
}

function log(...args) {
  logger.log("%csw", styles("log"), ...args);
}

function warn(...args) {
  logger.warn("%csw", styles("warn"), ...args);
}
